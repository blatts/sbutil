#!/usr/bin/env python
# -*- mode: Python; coding: latin-1 -*-
# Time-stamp: "2014-10-12 12:56:45 sb"

#  file       SConscript
#  copyright  (c) :::author::: :::year:::

# environment variables:
#   LIBPATH, LIBS, ASFLAGS, LINKFLAGS, CPPFLAGS, CPPPATH, CCFLAGS

import os.path

Import('env', 'using_cxx11')
localenv = env.Clone()

programs = [
    ':::project:::',
    ]

build_directory = 'build/scons/'

include_directories = [
    os.path.realpath('sbutil/src')
    ]

library_directories = [
    os.path.realpath('sbutil/build/scons/sbutil')
    ]

if os.path.isdir('/sw'):
  include_directories = ['/sw/include',] + include_directories
  library_directories = ['/sw/lib',] + library_directories

frameworks = []

warnings = [
    '',
    'all'
    ]

cxxflags = '-g -O3'
if using_cxx11:
  cxxflags += ' -std=c++11'

linkflags = ''

cxxflags += " " + " ".join(map(lambda w: '-W%s' % w, warnings))
linkflags += " " + " ".join(map(lambda f: '-framework %s' % f, frameworks))


localenv.Append(LINKFLAGS = linkflags)
localenv.Append(LIBPATH = library_directories)
localenv.Append(CPPPATH = include_directories)
localenv.Append(CXXFLAGS = cxxflags)

# Autmatically build sbutil library as sub project, do *not* pass down
# modifications to compiler flags, let the subproject decide how to
# compile itself.
localenv.SConscript('sbutil/SConscript',
                    exports = {'env' : env,
                               'using_cxx11' : using_cxx11})

# Build main program
localenv.Program(programs[0],
                 [':::project:::.cc',
                  ],
                  LIBS = ['sbutil'])


# SConscript ends here
